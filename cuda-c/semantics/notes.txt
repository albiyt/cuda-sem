problem with string literals and undef detection

should add checks for valid pointer anywhere one can be created, e.g., casting

can get rid of some of the arithmetic rules by orienting addition and subtraction
perhaps can do the same for casting?

would be nice to have a shorthand for 
f(a, b, c) => g(a, b, c)
other than
('f => 'g)(a,, b,, c)
[f => g](a, b, c)
(f => g)(a, b, c)
{f => g}(a, b, c)



problem re threads and string literals.  what addresses do they get?  are they shareable?


--- ! 6.4.4.3 An identifier declared as an enumeration constant has type int.

***(

maybe say something like
< k > label(?,, arrayType(T:Type) => pointerType(T:Type) ,, ?)
breaks toEval-aux
***)



--- why isn't K ~> K proper?
--- arithmetic on a void * pointer
--- argument of function type
--- need one past array
--- 6.7.5.3:11 if, in a parameter declaration, an identifier can be treated either as a typedef name or as a parameter name, it shall be taken as a typedef name
--- switch with only one case?
--- casting from unsigned long long int to int is super slow
--- pr34099.c checks if anding unknown with 0 is 0.  need to add named unknowns and better interpret

--- pr44828.c demonstrates slow conversion between large nums to small signed types

***(
 a beaut
  int a = 0;
  int *p;
  size_t b;
  b = (size_t)(p = &(int []){0, 1, 2}[++a]);
  if (a != 1 || *p != 1 || *(int *)b != 1)
    abort ();
***)

***(
--- fixme
union U
{
  int i, j[4];
} u = {};

what are j bits?  spec says padding bits are zeroed, but doesn't say about bits not in first id
***)


--- fixme not handling this
--- N1494 6.7.2.1:13 An unnamed member of structure type with no tag is called an anonymous structure; an unnamed member of union type with no tag is called an anonymous union. The members of an anonymous struct or union are considered to be members of the containing structure or union. This applies recursively if the containing structure or union is also an anonymous structure or union

--- take address of builtins

--- extern inside block that shadows variable in a function that shadows global extern

--- c1x 6.7.9:5 If the declaration of an identifier has block scope, and the identifier has external or internal linkage, the declaration shall have no initializer for the identifier
--- this means you can't have initializers for static variables??

---C99 6.7.8:10 If an object has static duration ... if it has pointer type, it is NULL, if it is arithmetic, 0, aggregate, recursively these, union, first member by these

--- switch on enum :(

--- § 6.6.3/2

    --- Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function

--- § 3.6.1/5

    --- If control reaches the end of main without encountering a return statement, the effect is that of executing
    --- return 0;


--- enums should probably be handled more generically so that they can be evaluated anywhere

***( 
not handling this type:
static union {
  unsigned char buf[MAX_LENGTH];
  long long align_int;
  long double align_fp;
} u1, u2;

("Field").KProperLabel(unsigned-char,,("_`[_`]").KProperLabel("Id"(buf),,("_+_").KProperLabel(("_+_").KProperLabel(("_+_").KProperLabel(("sizeof").KProperLabel(long-long-int),,("_*_").KProperLabel(("tv").KResultLabel(8,,unsigned-long-int),,("sizeof").KProperLabel(long-long-int))),,("sizeof").KProperLabel(long-long-int)),,("tv").KResultLabel(2,,unsigned-long-int)))) 
***)

--- FIXME serious bug with void spawn(int (*)(int), int, ...) where the int overwrites the pointer (i think) because of #NoName
