kmod COMMON-C-CONFIGURATION is
	including C-SYNTAX
	
	op k : -> CellLabel
	op stackFrame : -> CellLabel
	op continuation : -> CellLabel
	op stackCurrentFunction : -> CellLabel
	op stackCurrentProgramLoc : -> CellLabel
	op currentProgramLoc : -> CellLabel 
	op structs : -> CellLabel
	
	ops gotoMap gotoCalculation currentFunction computation : -> CellLabel
	ops currentTranslationUnit calculateGotoMap nestingDepthGoto blockHistoryGoto declarationStack : -> CellLabel
	ops computationTail loopStackGoto externalLocations internalLocations : -> CellLabel
	ops blockHistory shouldInit nextSharedLoc preLinkage declarationOrder declarations preTypes : -> CellLabel
	ops nextLoc localVariables externalDefinitions internalDefinitions : -> CellLabel
	ops localAddresses incompleteLength genv env control savedInitialization typedBody currentObject currentSubObject callStack functionTranslationUnits translationUnits gtypes functions programText types type freshNat declarationTypeHolder gstructs  : -> CellLabel
	
	
	configuration 
		<T> 
			// <modelChecking multiplicity="?"> .K </modelChecking>
			// <busy> .Bag </busy>
			<gotoMap color="lightgray"> .Map </gotoMap>
			<genv color="lightgray"> .Map </genv>
			<gtypes color="lightgray"> .Map </gtypes>
			<gstructs color="lightgray"> .Map </gstructs>
			<mem color="red"> .Map </mem>
			<notWritable> .Map </notWritable>
			<functions color="lightgray"> .Map </functions>
			<freshNat color="green"> 0 </freshNat>
			<randNat color="green"> 0 </randNat>
			<nextThreadId color="green"> 2 </nextThreadId> // 0 is global, 1 is main
			<malloced color="lightgray"> .Map </malloced>
			<stringLiterals color="lightgray"> .Map </stringLiterals>
			@latex("\\kBR")
			// <staticSemantics multiplicity="?" color="cyan">
				<leftoverExterns color="cyan"> .Bag </leftoverExterns>
				<translationUnits color="cyan"> .Bag </translationUnits>
				<declarationOrder color="cyan"> .Map </declarationOrder>
				<externalDefinitions color="cyan"> .Map </externalDefinitions>
				<internalDefinitions color="cyan"> .Map </internalDefinitions>
				<internalLocations color="cyan"> .Map </internalLocations>
				<externalLocations color="cyan"> .Map </externalLocations>
				<preLinkage color="cyan"> .Map </preLinkage>
				<preTypes color="cyan"> .Map </preTypes>
				<declarations color="cyan"> .Set </declarations>
			// </staticSemantics>
			@latex("\\kBR")
			<functionTranslationUnits color="lightgray"> .Map </functionTranslationUnits> // map from current tu to (map from id to where function was defined)			
			<nextSharedLoc color="green"> 0 </nextSharedLoc>
			<threadInformation color="yellow">
				<threadStatus color="yellow"> .Map </threadStatus>
				<joiningMap color="yellow"> .Map </joiningMap>
				<detachingMap color="yellow"> .Map </detachingMap>
			</threadInformation>
			// <openFiles color="lightgray"> .Map </openFiles>
			<programText color="black"> .Map </programText>
			<compoundLiteralMap color="lightgray"> .Map </compoundLiteralMap>
			@latex("\\kBR")
			<threads color="yellow">

                        // CUDA BEGIN: Since our CUDA configuration stuff here is
                        // all about managing threads, it kinda makes sense for
                        // it to be inside the "threads" block. The grid id will
                        // be unique for every kernel call.
                        <nextGid> 1 </nextGid> 
                        <grids> .Map </grids>
                        <streams> .Set </streams>
                        <stream multiplicity="*"> 
                        <sid> 0 </sid>
                        <streamContents> .K </streamContents>
                        </stream>
                        // CUDA END.

				<thread multiplicity="*" color="yellow">

                              <gid> 0 </gid> // CUDA: grid id.
                              <bid> 0 </bid> // CUDA: block id.
                              <tid> 0 </tid> // CUDA: thread id.

					<threadId color="yellow"> 0 </threadId>
					<nextLoc color="green"> 0 </nextLoc> // should be initialized with a pair (threadId, 0)
					<buffer color="lightgray"> .List </buffer>
					<blocked color="lightgray"> false </blocked>
					<k color="red" multiplicity="?"> .K </k>
					@latex("\\kBR")
					<threadLocal>
						<callStack color="violet"> .List </callStack> // stack of "control" cells
						<calculateGotoMap color="cyan">
							<gotoCalculation multiplicity="*" color="cyan">
								<computation color="cyan"> .K </computation>
								<computationTail color="cyan"> .K </computationTail>
								<declarationStack color="cyan"> .List </declarationStack>
								<nestingDepthGoto color="cyan"> 0 </nestingDepthGoto>
								<blockHistoryGoto color="cyan"> .List </blockHistoryGoto>
								<loopStackGoto color="cyan"> .List </loopStackGoto>
							</gotoCalculation>
						</calculateGotoMap>
						@latex("\\kBR")
						<control>
							<finalComputation multiplicity="?" color="lightgray"> .K </finalComputation>
							<blockStack color="violet"> .List </blockStack> // stack of "local" cells
							<local>
								// maps from Ids
								<env color="red"> .Map </env>
								<types color="lightgray"> .Map </types>
								<structs color="lightgray"> .Map </structs>

								<formatting multiplicity="?">
									<format> .List </format>
									<formatArg> .K </formatArg>
									<formatResult> .List </formatResult>
									<formatState> "normal" </formatState>
									<formatModifiers> .Map </formatModifiers>
									<formatLength> "" </formatLength>
								</formatting>
								// information about the block we're in
								<nestingDepth color="lightgray"> 0 </nestingDepth>
								<blockHistory color="lightgray"> .List </blockHistory>
								<localVariables color="lightgray"> .List </localVariables> // used to make sure we don't declare a variable twice in the same scope
								<localAddresses color="lightgray"> .Set </localAddresses> // used to deallocate memory on leaving a block
							</local>
							@latex("\\kBR")
							<shouldInit color="lightgray"> true </shouldInit> // used to control initialization when gotoing
							// used to figure initializers
							<currentObject color="cyan"> .List </currentObject>
							<currentSubObject color="cyan"> .List </currentSubObject>
							<incompleteLength color="cyan"> 0 </incompleteLength>
							<savedInitialization color="cyan"> .K </savedInitialization>
							<loopStack color="violet"> .List </loopStack>
							@latex("\\kBR")
							<locsWrittenTo color="lightgray"> .Bag </locsWrittenTo>
							<holds color="yellow"> .Map </holds>
							<type multiplicity="?" color="cyan"> .K </type> // used for typing expressions
							<declarationTypeHolder color="cyan"> .K </declarationTypeHolder> // holds the innermost type while we unroll the type around it
							
							// general information
							<currentTranslationUnit color="lightgray"> "" </currentTranslationUnit>
							<currentFunction color="lightgray"> .K </currentFunction>
							<currentProgramLoc color="black"> .K </currentProgramLoc>
						</control>
					</threadLocal>
				</thread>
			</threads>
		</T>
		@latex("\\kBR")
		<xmessages color="black"> .K </xmessages>
		<files color="lightgray">
			<fileCommands> .K </fileCommands>
			<file multiplicity="*">
				<fid> .K </fid>
				<uri> .K </uri>
				<pos> 0 </pos>
				<mode> "r" </mode>
				<buff> "" </buff>
				<sending> .List </sending>
				<done> ListItem("") </done>
			</file>
		</files> 
		<input color="lightgray"> "" </input>
		<output color="lightgray"> "" </output>
		//<unflushedOutput color="lightgray"> "" </unflushedOutput>
		<resultValue color="red"> .K </resultValue>
		<errorCell multiplicity="?" color="black"> .K </errorCell>
	
	ops files input output resultValue errorCell xmessages : -> CellLabel
	
	subsort #Id #Int #String #Float #Bool #Rat < K
	//subsort #String < Builtins
	
	subsort C < K
	
endkm
